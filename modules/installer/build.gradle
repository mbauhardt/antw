

/************************** ANT ********************************/

contribDirectory = new File(installDirectory, 'contrib')
antDirectory = new File(contribDirectory, 'apache-ant-1.8.3')


task downloadAnt << { 
	if(!antDirectory.exists()){
		contribDirectory.mkdirs();
		ant.get(src: 'http://www.apache.org/dist/ant/binaries/apache-ant-1.8.3-bin.zip', dest:new File(contribDirectory, 'ant.zip'), verbose:true)
		ant.unzip(src:new File(contribDirectory, 'ant.zip'), dest:contribDirectory)
		new File(contribDirectory, 'ant.zip').delete()
	}
}

downloadAnt << {
	ant.chmod(dir: antDirectory.absolutePath+'/bin', perm: 'u+x', includes: '*')
}



/************************ METAS *****************************/
repositories { 
	flatDir name: 'uploadMeta', dirs: new File(currentInstallDirectory, 'meta')
}

configurations { 
	metas
} 

def license = file(project.buildDir.absolutePath+'/LICENSE.txt');

artifacts { 
    metas license 
} 


uploadMetas.doFirst {
	ant.copy(file:new File(rootDir,'/LICENSE'), toFile:project.buildDir.absolutePath+'/LICENSE.txt')
}

uploadMetas {
 	repositories {
    	add project.repositories.uploadMeta
    } 
}

uploadMetas << {
	symlink = new File(installDirectory, 'LICENSE')
	symlink.delete();
	ant.symlink(link: symlink, resource:currentInstallDirectory.absolutePath+'/meta/LICENSE-'+project.version+'.txt')
}


/***********************BIN **************************/

repositories { 
	flatDir name: 'uploadBin', dirs: new File(currentInstallDirectory, 'bin')
}

antwSrcUrl='https://github.com/mbauhardt/antw'
antwNewsUrl='http://twitter.com/antwcc'
binDirectory = new File(installDirectory, 'bin')

commonJar = new File(project.currentInstallDirectory, 'lib/antw-common-'+project.version+'.jar').absolutePath
loggerJar = new File(project.currentInstallDirectory, 'lib/antw-logger-'+project.version+'.jar').absolutePath
antwClassPath = commonJar + ':' + loggerJar

scriptName ='antw-' + project.version
scriptUpdateName = 'antw-update-' + project.version
def scriptPath = file(project.buildDir.absolutePath+'/antw.sh');
def scriptUpdatePath = file('src/main/scripts/antw-update.sh');

configurations { 
	scripts
}

artifacts { 
	scripts scriptPath,scriptUpdatePath
} 

antwRevision='n.a.'

uploadScripts.doFirst {
	project.buildDir.mkdirs()
	scriptPath.write('echo \'\'')
	scriptPath.append('\n')
	scriptPath.append('echo \'Welcome to antw, version: ' + project.version + ', revision: ' + antwRevision + '\'' + ', build with apache-ant-1.8.3')
	scriptPath.append('\n')
	scriptPath.append('echo \''+antwSrcUrl+ '\'')
	scriptPath.append('\n')
	scriptPath.append('echo \''+antwNewsUrl+ '\'')
	scriptPath.append('\n')
	scriptPath.append('echo \'\'')
	scriptPath.append('\n')
	scriptPath.append('echo \'\'')
	scriptPath.append('\n')
	scriptPath.append(project.antDirectory.absolutePath+'/bin/ant' + ' -lib ' + antwClassPath + ' -logger antw.logger.AntwLogger $@')
}

uploadScripts.doFirst {
	ant.exec(executable:'git', outputproperty:'antwRevision') {
		arg(line:'log -1 --pretty=format:%H')
	}
	antwRevision=ant.antwRevision
}

uploadScripts {
 	repositories {
    	add project.repositories.uploadBin
    } 
}

uploadScripts << {
	binDirectory.mkdirs()
	symlink = new File(binDirectory, 'antw')
	symlink.delete();
	ant.symlink(link: symlink, resource:currentInstallDirectory.absolutePath+'/bin/'+scriptName+'.sh')
}

uploadScripts << {
	symlink = new File(binDirectory, 'antw-update')
	symlink.delete();
	ant.symlink(link: symlink, resource:currentInstallDirectory.absolutePath+'/bin/'+scriptUpdateName+'.sh')
}

uploadScripts << {
	ant.chmod(dir: binDirectory, perm: 'u+x', includes: '*')
	ant.chmod(dir: currentInstallDirectory.absolutePath+'/bin', perm: 'u+x', includes: '*')
}
